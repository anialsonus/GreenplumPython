"""
This module creates a Python object TableRowGroup for group by table.
"""
from typing import TYPE_CHECKING, Callable, Iterable, List, MutableSet, Set

from greenplumpython.expr import Expr

if TYPE_CHECKING:
    from greenplumpython.func import FunctionExpr
    from greenplumpython.table import Table


class TableGroupingSets:
    """
    Represents a group of rows in a :class:`~table.Table` generated by :func:`~table.Table.group_by`.
    """

    def __init__(self, table: "Table", grouping_sets: List[Iterable["Expr"]]) -> None:
        self._table = table
        self._grouping_sets = grouping_sets

    def apply(self, func: Callable[["Table"], "FunctionExpr"]) -> "FunctionExpr":
        """
        Apply a function to the grouping set.

        Args:
            func: An aggregate function to be applied to

        Returns:
            FunctionExpr: a callable

        Example:
            .. code-block::  python

                numbers.group_by("is_even").apply(lambda row: count(row["*"]))
        """
        return func(self._table).bind(group_by=self)

    def add(self, *column_names: str) -> "TableGroupingSets":
        """
        Group the current :class:`~table.Table` by `column_names` and add to
        the GROUPING SETS list so that when applying an agggregate function to
        the list, the function will be applied to each grouping set
        individually.

        Args:
            grouping_items:
        """
        return TableGroupingSets(
            self._table,
            self._grouping_sets + [column_names],
        )

    def flatten(self) -> Set[str]:
        """:meta private:"""
        item_set: MutableSet[Expr] = set()
        for grouping_set in self._grouping_sets:
            for item in grouping_set:
                assert isinstance(item, str), f"Grouping item {item} is not a column name."
                item_set.add(item)
        return item_set

    @property
    def table(self) -> "Table":
        """
        Returns :class:`~table.Table` associated for GROUP BY

        Returns:
            Table
        """
        return self._table

    # FIXME: Make this function package-private
    def clause(self) -> str:
        """:meta private:"""
        grouping_sets_str = [
            f"({','.join([item for item in grouping_set])})" for grouping_set in self._grouping_sets
        ]
        return "GROUP BY GROUPING SETS " + f"({','.join(grouping_sets_str)})"
